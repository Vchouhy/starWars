{"ast":null,"code":"var _jsxFileName = \"/Users/mavictoriachouhy/Desktop/Training/Conexa/StarWars-front/src/GenericComponents/Pagination/Pagination.jsx\",\n  _s = $RefreshSig$();\n// import React from \"react\";\n\n// export default function Pagination({propPerPage, length, pagination}){\n//     const pageNumber = [];\n\n//     for(let i = 1; i <= Math.ceil(length / propPerPage); i++){\n//         pageNumber.push(i)\n//     }\n\n//     return(\n//         <div >\n//             <ul >\n//                 {pageNumber  && pageNumber.map(number =>{\n//                     return(\n//                     <span key = {number} >\n//                     <button onClick = {()=> pagination(number)} > {number} </button>\n//                     </span>)\n//                 })}\n//             </ul>\n//         </div>\n//     )\n// }\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Pagination = ({\n  propPerPage,\n  length,\n  pagination,\n  currentPage\n}) => {\n  _s();\n  const [visiblePages, setVisiblePages] = useState(5);\n  const pageNumber = [];\n  for (let i = 1; i <= Math.ceil(length / propPerPage); i++) {\n    pageNumber.push(i);\n  }\n  const handleVisiblePages = num => {\n    setVisiblePages(num);\n  };\n  const renderPageNumbers = () => {\n    const pageNumbers = [];\n\n    // Mostrar botón \"Previous Page\" si no estamos en la primera página\n    if (currentPage > 1) {\n      pageNumbers.push( /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => pagination(currentPage - 1),\n          children: \"Prev\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 11\n        }, this)\n      }, \"prev\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this));\n    }\n\n    // Mostrar botón \"First Page\" si estamos más lejos de la primera página\n    if (currentPage > Math.ceil(visiblePages / 2) + 1) {\n      pageNumbers.push( /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => pagination(1),\n          children: \"1\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this)\n      }, \"first\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this));\n\n      // Mostrar puntos suspensivos si no estamos cerca de la primera página\n      if (currentPage > Math.ceil(visiblePages / 2) + 2) {\n        pageNumbers.push( /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 13\n          }, this)\n        }, \"dots1\", false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }, this));\n      }\n    }\n\n    // Calcular el rango de páginas que queremos mostrar\n    let startPage = Math.max(currentPage - Math.floor(visiblePages / 2), 1);\n    let endPage = Math.min(startPage + visiblePages - 1, pageNumber.length);\n\n    // Asegurarnos de que el rango de páginas no exceda el número total de páginas\n    if (endPage - startPage + 1 < visiblePages) {\n      startPage = Math.max(endPage - visiblePages + 1, 1);\n    }\n    for (let i = startPage; i <= endPage; i++) {\n      pageNumbers.push( /*#__PURE__*/_jsxDEV(\"li\", {\n        className: i === currentPage ? \"active\" : \"\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => pagination(i),\n          children: i\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }, this)\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this));\n    }\n\n    // Mostrar puntos suspensivos antes de las páginas ocultas entre la página actual y la última página\n    if (currentPage < pageNumber.length - Math.ceil(visiblePages / 2)) {\n      if (currentPage < pageNumber.length - Math.ceil(visiblePages / 2) - 1) {\n        pageNumbers.push( /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 13\n          }, this)\n        }, \"dots2\", false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }, this));\n      }\n    }\n\n    // Mostrar botón \"Last Page\" si estamos más lejos de la última página\n    if (currentPage < pageNumber.length - Math.ceil(visiblePages / 2) + 1) {\n      pageNumbers.push( /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => pagination(pageNumber.length),\n          children: pageNumber.length\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }, this)\n      }, \"last\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this));\n    }\n\n    // Mostrar botón \"Next Page\" si no estamos en la última página\n    if (currentPage < pageNumber.length) {\n      pageNumbers.push( /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => pagination(currentPage + 1),\n          children: \"Next\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 11\n        }, this)\n      }, \"next\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this));\n    }\n    return pageNumbers;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n      children: renderPageNumbers()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleVisiblePages(5),\n        children: \"5\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleVisiblePages(10),\n        children: \"10\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleVisiblePages(15),\n        children: \"15\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 120,\n    columnNumber: 5\n  }, this);\n};\n_s(Pagination, \"0kpq3KgeQ6RqjS/iRyt2ofqID14=\");\n_c = Pagination;\nexport default Pagination;\nvar _c;\n$RefreshReg$(_c, \"Pagination\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Pagination","propPerPage","length","pagination","currentPage","_s","visiblePages","setVisiblePages","pageNumber","i","Math","ceil","push","handleVisiblePages","num","renderPageNumbers","pageNumbers","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","startPage","max","floor","endPage","min","className","_c","$RefreshReg$"],"sources":["/Users/mavictoriachouhy/Desktop/Training/Conexa/StarWars-front/src/GenericComponents/Pagination/Pagination.jsx"],"sourcesContent":["// import React from \"react\";\n\n// export default function Pagination({propPerPage, length, pagination}){\n//     const pageNumber = [];\n\n//     for(let i = 1; i <= Math.ceil(length / propPerPage); i++){\n//         pageNumber.push(i)\n//     }\n\n\n//     return(\n//         <div >\n//             <ul >\n//                 {pageNumber  && pageNumber.map(number =>{\n//                     return(\n//                     <span key = {number} >\n//                     <button onClick = {()=> pagination(number)} > {number} </button>\n//                     </span>)\n//                 })}\n//             </ul>\n//         </div>\n//     )\n// }\nimport React, { useState } from \"react\";\n\nconst Pagination = ({ propPerPage, length, pagination, currentPage }) => {\n    const [visiblePages, setVisiblePages] = useState(5);\n    const pageNumber = [];\n  \n    for (let i = 1; i <= Math.ceil(length / propPerPage); i++) {\n      pageNumber.push(i);\n    }\n  \n    const handleVisiblePages = (num) => {\n      setVisiblePages(num);\n    };\n\n  const renderPageNumbers = () => {\n    const pageNumbers = [];\n\n    // Mostrar botón \"Previous Page\" si no estamos en la primera página\n    if (currentPage > 1) {\n      pageNumbers.push(\n        <li key=\"prev\">\n          <button onClick={() => pagination(currentPage - 1)}>Prev</button>\n        </li>\n      );\n    }\n\n    // Mostrar botón \"First Page\" si estamos más lejos de la primera página\n    if (currentPage > Math.ceil(visiblePages / 2) + 1) {\n      pageNumbers.push(\n        <li key=\"first\">\n          <button onClick={() => pagination(1)}>1</button>\n        </li>\n      );\n\n      // Mostrar puntos suspensivos si no estamos cerca de la primera página\n      if (currentPage > Math.ceil(visiblePages / 2) + 2) {\n        pageNumbers.push(\n          <li key=\"dots1\">\n            <span>...</span>\n          </li>\n        );\n      }\n    }\n\n    // Calcular el rango de páginas que queremos mostrar\n    let startPage = Math.max(currentPage - Math.floor(visiblePages / 2), 1);\n    let endPage = Math.min(startPage + visiblePages - 1, pageNumber.length);\n\n    // Asegurarnos de que el rango de páginas no exceda el número total de páginas\n    if (endPage - startPage + 1 < visiblePages) {\n      startPage = Math.max(endPage - visiblePages + 1, 1);\n    }\n\n    for (let i = startPage; i <= endPage; i++) {\n      pageNumbers.push(\n        <li key={i} className={i === currentPage ? \"active\" : \"\"}>\n          <button onClick={() => pagination(i)}>{i}</button>\n        </li>\n      );\n    }\n\n    // Mostrar puntos suspensivos antes de las páginas ocultas entre la página actual y la última página\n    if (currentPage < pageNumber.length - Math.ceil(visiblePages / 2)) {\n      if (currentPage < pageNumber.length - Math.ceil(visiblePages / 2) - 1) {\n        pageNumbers.push(\n          <li key=\"dots2\">\n            <span>...</span>\n          </li>\n        );\n      }\n    }\n\n    // Mostrar botón \"Last Page\" si estamos más lejos de la última página\n    if (currentPage < pageNumber.length - Math.ceil(visiblePages / 2) + 1) {\n      pageNumbers.push(\n        <li key=\"last\">\n          <button onClick={() => pagination(pageNumber.length)}>\n            {pageNumber.length}\n          </button>\n        </li>\n      );\n    }\n\n    // Mostrar botón \"Next Page\" si no estamos en la última página\n    if (currentPage < pageNumber.length) {\n      pageNumbers.push(\n        <li key=\"next\">\n          <button onClick={() => pagination(currentPage + 1)}>Next</button>\n        </li>\n      );\n    }\n\n    return pageNumbers;\n  };\n\n  return (\n    <div>\n      <ul>{renderPageNumbers()}</ul>\n      <div>\n        <button onClick={() => handleVisiblePages(5)}>5</button>\n        <button onClick={() => handleVisiblePages(10)}>10</button>\n        <button onClick={() => handleVisiblePages(15)}>15</button>\n      </div>\n    </div>\n  );\n};\n\nexport default Pagination;\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}