{"ast":null,"code":"var _jsxFileName = \"/Users/mavictoriachouhy/Desktop/Training/Conexa/StarWars-front/src/GenericComponents/Pagination/Pagination.jsx\";\n// import React from \"react\";\n\n// export default function Pagination({propPerPage, length, pagination}){\n//     const pageNumber = [];\n\n//     for(let i = 1; i <= Math.ceil(length / propPerPage); i++){\n//         pageNumber.push(i)\n//     }\n\n//     return(\n//         <div >\n//             <ul >\n//                 {pageNumber  && pageNumber.map(number =>{\n//                     return(\n//                     <span key = {number} >\n//                     <button onClick = {()=> pagination(number)} > {number} </button>\n//                     </span>)\n//                 })}\n//             </ul>\n//         </div>\n//     )\n// }\n\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Pagination = ({\n  propPerPage,\n  length,\n  pagination,\n  currentPage\n}) => {\n  const pageNumber = [];\n  for (let i = 1; i <= Math.ceil(length / propPerPage); i++) {\n    pageNumber.push(i);\n  }\n  const visiblePages = 3;\n  const renderPageNumbers = () => {\n    const pageNumbers = [];\n\n    // Mostrar botón \"Previous Page\" si no estamos en la primera página\n    if (currentPage > 1) {\n      pageNumbers.push( /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => pagination(currentPage - 1),\n          children: \"Prev\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 11\n        }, this)\n      }, \"prev\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this));\n    }\n\n    // Mostrar botón \"First Page\" si estamos más lejos de la primera página\n    if (currentPage > Math.ceil(visiblePages / 2) + 1) {\n      pageNumbers.push( /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => pagination(1),\n          children: \"1\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this)\n      }, \"first\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this));\n\n      // Mostrar puntos suspensivos si no estamos cerca de la primera página\n      if (currentPage > Math.ceil(visiblePages / 2) + 2) {\n        pageNumbers.push( /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 13\n          }, this)\n        }, \"dots1\", false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this));\n      }\n    }\n\n    // Calcular el rango de páginas que queremos mostrar\n    let startPage = Math.max(currentPage - Math.floor(visiblePages / 2), 1);\n    let endPage = Math.min(startPage + visiblePages - 1, pageNumber.length);\n\n    // Asegurarnos de que el rango de páginas no exceda el número total de páginas\n    if (endPage - startPage + 1 < visiblePages) {\n      startPage = Math.max(endPage - visiblePages + 1, 1);\n    }\n    for (let i = startPage; i <= endPage; i++) {\n      pageNumbers.push( /*#__PURE__*/_jsxDEV(\"li\", {\n        className: i === currentPage ? \"active\" : \"\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => pagination(i),\n          children: i\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this)\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this));\n    }\n\n    // Mostrar puntos suspensivos si no estamos cerca de la última página\n    if (currentPage < pageNumber.length - Math.ceil(visiblePages / 2)) {\n      if (currentPage < pageNumber.length - Math.ceil(visiblePages / 2) - 1) {\n        pageNumbers.push( /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 13\n          }, this)\n        }, \"dots2\", false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this));\n      }\n\n      // Mostrar botón \"Last Page\" si estamos más lejos de la última página\n      pageNumbers.push( /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => pagination(pageNumber.length),\n          children: pageNumber.length\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this)\n      }, \"last\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this));\n    }\n\n    // Mostrar botón \"Next Page\" si no estamos en la última página\n    if (currentPage < pageNumber.length) {\n      pageNumbers.push( /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => pagination(currentPage + 1),\n          children: \"Next\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }, this)\n      }, \"next\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this));\n    }\n    return pageNumbers;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: renderPageNumbers()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 5\n  }, this);\n};\n_c = Pagination;\nexport default Pagination;\nvar _c;\n$RefreshReg$(_c, \"Pagination\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","Pagination","propPerPage","length","pagination","currentPage","pageNumber","i","Math","ceil","push","visiblePages","renderPageNumbers","pageNumbers","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","startPage","max","floor","endPage","min","className","_c","$RefreshReg$"],"sources":["/Users/mavictoriachouhy/Desktop/Training/Conexa/StarWars-front/src/GenericComponents/Pagination/Pagination.jsx"],"sourcesContent":["// import React from \"react\";\n\n// export default function Pagination({propPerPage, length, pagination}){\n//     const pageNumber = [];\n\n//     for(let i = 1; i <= Math.ceil(length / propPerPage); i++){\n//         pageNumber.push(i)\n//     }\n\n\n//     return(\n//         <div >\n//             <ul >\n//                 {pageNumber  && pageNumber.map(number =>{\n//                     return(\n//                     <span key = {number} >\n//                     <button onClick = {()=> pagination(number)} > {number} </button>\n//                     </span>)\n//                 })}\n//             </ul>\n//         </div>\n//     )\n// }\n\nimport React from \"react\";\n\nconst Pagination = ({ propPerPage, length, pagination, currentPage }) => {\n  const pageNumber = [];\n\n  for (let i = 1; i <= Math.ceil(length / propPerPage); i++) {\n    pageNumber.push(i);\n  }\n\n  const visiblePages = 3;\n\n  const renderPageNumbers = () => {\n    const pageNumbers = [];\n\n    // Mostrar botón \"Previous Page\" si no estamos en la primera página\n    if (currentPage > 1) {\n      pageNumbers.push(\n        <li key=\"prev\">\n          <button onClick={() => pagination(currentPage - 1)}>Prev</button>\n        </li>\n      );\n    }\n\n    // Mostrar botón \"First Page\" si estamos más lejos de la primera página\n    if (currentPage > Math.ceil(visiblePages / 2) + 1) {\n      pageNumbers.push(\n        <li key=\"first\">\n          <button onClick={() => pagination(1)}>1</button>\n        </li>\n      );\n\n      // Mostrar puntos suspensivos si no estamos cerca de la primera página\n      if (currentPage > Math.ceil(visiblePages / 2) + 2) {\n        pageNumbers.push(\n          <li key=\"dots1\">\n            <span>...</span>\n          </li>\n        );\n      }\n    }\n\n    // Calcular el rango de páginas que queremos mostrar\n    let startPage = Math.max(currentPage - Math.floor(visiblePages / 2), 1);\n    let endPage = Math.min(startPage + visiblePages - 1, pageNumber.length);\n\n    // Asegurarnos de que el rango de páginas no exceda el número total de páginas\n    if (endPage - startPage + 1 < visiblePages) {\n      startPage = Math.max(endPage - visiblePages + 1, 1);\n    }\n\n    for (let i = startPage; i <= endPage; i++) {\n      pageNumbers.push(\n        <li key={i} className={i === currentPage ? \"active\" : \"\"}>\n          <button onClick={() => pagination(i)}>{i}</button>\n        </li>\n      );\n    }\n\n    // Mostrar puntos suspensivos si no estamos cerca de la última página\n    if (currentPage < pageNumber.length - Math.ceil(visiblePages / 2)) {\n      if (currentPage < pageNumber.length - Math.ceil(visiblePages / 2) - 1) {\n        pageNumbers.push(\n          <li key=\"dots2\">\n            <span>...</span>\n          </li>\n        );\n      }\n\n      // Mostrar botón \"Last Page\" si estamos más lejos de la última página\n      pageNumbers.push(\n        <li key=\"last\">\n          <button onClick={() => pagination(pageNumber.length)}>\n            {pageNumber.length}\n          </button>\n        </li>\n      );\n    }\n\n    // Mostrar botón \"Next Page\" si no estamos en la última página\n    if (currentPage < pageNumber.length) {\n      pageNumbers.push(\n        <li key=\"next\">\n          <button onClick={() => pagination(currentPage + 1)}>Next</button>\n        </li>\n      );\n    }\n\n    return pageNumbers;\n  };\n\n  return (\n    <div>\n      <ul>\n        {renderPageNumbers()}\n      </ul>\n    </div>\n  );\n};\n\nexport default Pagination;\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}