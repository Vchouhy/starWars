{"ast":null,"code":"var _jsxFileName = \"/Users/mavictoriachouhy/Desktop/Training/Conexa/StarWars-front/src/Components/People/People.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState } from \"react\";\n// import Card from \"../../GenericComponents/Card/Card\";\n// import { useSelector } from \"react-redux\";\n// import \"./People.scss\";\n// import Modals from \"../../GenericComponents/Modal/Modals\";\n// import { useModal } from \"../../hooks/useModal\";\n// import Pagination from \"../../GenericComponents/Pagination/Pagination\";\n// import SearchBar from \"../../GenericComponents/SearchBar/SerchBar\";\n\n// const People = () => {\n//   const searchResults = useSelector((state) => state.searchResults.people);\n//   const people = useSelector((state) => state.people);\n//   const peopleResults = searchResults && searchResults.length ? searchResults : people;\n\n//   const [selectedPerson, setselectedPerson] = useState(null);\n//   const [isOpenModal, openModal, closeModal] = useModal(false);\n//   const [currentPage, setCurrentPage] = useState(1);\n//   const [personPerPage, setPersonPerPage] = useState(8);\n//   const indexOfLastVehicle = currentPage * personPerPage;\n//   const indexOfFirstVehicle = indexOfLastVehicle - personPerPage;\n//   const currentPerson = peopleResults ? peopleResults.slice(indexOfFirstVehicle, indexOfLastVehicle) : people.slice(indexOfFirstVehicle, indexOfLastVehicle);\n\n//   const handleOpenModal = (person) => {\n//     setselectedPerson({ ...person, isPerson: true });\n//     openModal();\n//   };\n\n//   const pagination = (pageNumber) => {\n//     setCurrentPage(pageNumber);\n//   };\n\n//   return (\n//     <div>\n\n//     <div className=\"main-container\">\n//       <SearchBar prop=\"people\"></SearchBar>\n//       {currentPerson.map((person) => {\n//         console.log(currentPerson)\n//         return (\n//           <Card key={person._id} name={person.name}>\n//             <button onClick={() => handleOpenModal(person)}>OpenDetail</button>\n//           </Card>\n//         );\n//       })}\n//       {isOpenModal && selectedPerson && (\n//         <Modals isOpen={isOpenModal} closeModal={closeModal}>\n//           {selectedPerson}\n//         </Modals>\n//       )}\n//     </div>\n\n//       <Pagination\n//           propPerPage={personPerPage}\n//           length={people.length}\n//           pagination={pagination}\n//           currentPage={currentPage}\n//         />\n//     </div>\n//   );\n// };\n\n// export default People;\nimport React, { useState, useEffect } from \"react\";\nimport Card from \"../../GenericComponents/Card/Card\";\nimport { useSelector } from \"react-redux\";\nimport Modals from \"../../GenericComponents/Modal/Modals\";\nimport { useModal } from \"../../hooks/useModal\";\nimport Pagination from \"../../GenericComponents/Pagination/Pagination\";\nimport SearchBar from \"../../GenericComponents/SearchBar/SerchBar\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst People = () => {\n  _s();\n  const searchResults = useSelector(state => state.searchResults.people);\n  const people = useSelector(state => state.people);\n  const peopleResults = searchResults && searchResults.length ? searchResults : null;\n  const [selectedPerson, setselectedPerson] = useState(null);\n  const [isOpenModal, openModal, closeModal] = useModal(false);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [personPerPage, setPersonPerPage] = useState(8);\n  const [hasSearchResults, setHasSearchResults] = useState(false);\n  const [currentPerson, setCurrentPerson] = useState([]);\n  useEffect(() => {\n    // Update the current people based on the current page and people per page\n    const indexOfLastPerson = currentPage * personPerPage;\n    const indexOfFirstPerson = indexOfLastPerson - personPerPage;\n    if (hasSearchResults && searchResults) {\n      setCurrentPerson(searchResults.slice(indexOfFirstPerson, indexOfLastPerson));\n    } else {\n      setCurrentPerson(people.slice(indexOfFirstPerson, indexOfLastPerson));\n    }\n  }, [hasSearchResults, currentPage, personPerPage, people, searchResults]);\n  useEffect(() => {\n    // Check if there are search results\n    setHasSearchResults(searchResults && searchResults.length > 0);\n    // Reset currentPage when search results change\n    setCurrentPage(1);\n  }, [searchResults]);\n  const handleOpenModal = person => {\n    setselectedPerson({\n      ...person,\n      isPerson: true\n    });\n    openModal();\n  };\n  const pagination = pageNumber => {\n    setCurrentPage(pageNumber);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(SearchBar, {\n        prop: \"people\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"main-container\",\n        children: [currentPerson.map(person => {\n          return /*#__PURE__*/_jsxDEV(Card, {\n            name: person.name,\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleOpenModal(person),\n              children: \"OpenDetail\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 118,\n              columnNumber: 15\n            }, this)\n          }, person._id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 13\n          }, this);\n        }), isOpenModal && selectedPerson && /*#__PURE__*/_jsxDEV(Modals, {\n          isOpen: isOpenModal,\n          closeModal: closeModal,\n          children: [selectedPerson.name, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Pagination, {\n      propPerPage: personPerPage,\n      length: hasSearchResults ? searchResults.length : people.length,\n      pagination: pagination,\n      currentPage: currentPage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(People, \"PTotLvLwckcMjb3932L6hiAb0Ro=\", false, function () {\n  return [useSelector, useSelector, useModal];\n});\n_c = People;\nexport default People;\nvar _c;\n$RefreshReg$(_c, \"People\");","map":{"version":3,"names":["React","useState","useEffect","Card","useSelector","Modals","useModal","Pagination","SearchBar","jsxDEV","_jsxDEV","Fragment","_Fragment","People","_s","searchResults","state","people","peopleResults","length","selectedPerson","setselectedPerson","isOpenModal","openModal","closeModal","currentPage","setCurrentPage","personPerPage","setPersonPerPage","hasSearchResults","setHasSearchResults","currentPerson","setCurrentPerson","indexOfLastPerson","indexOfFirstPerson","slice","handleOpenModal","person","isPerson","pagination","pageNumber","children","prop","fileName","_jsxFileName","lineNumber","columnNumber","className","map","name","onClick","_id","isOpen","propPerPage","_c","$RefreshReg$"],"sources":["/Users/mavictoriachouhy/Desktop/Training/Conexa/StarWars-front/src/Components/People/People.jsx"],"sourcesContent":["// import React, { useState } from \"react\";\n// import Card from \"../../GenericComponents/Card/Card\";\n// import { useSelector } from \"react-redux\";\n// import \"./People.scss\";\n// import Modals from \"../../GenericComponents/Modal/Modals\";\n// import { useModal } from \"../../hooks/useModal\";\n// import Pagination from \"../../GenericComponents/Pagination/Pagination\";\n// import SearchBar from \"../../GenericComponents/SearchBar/SerchBar\";\n\n// const People = () => {\n//   const searchResults = useSelector((state) => state.searchResults.people);\n//   const people = useSelector((state) => state.people);\n//   const peopleResults = searchResults && searchResults.length ? searchResults : people;\n\n//   const [selectedPerson, setselectedPerson] = useState(null);\n//   const [isOpenModal, openModal, closeModal] = useModal(false);\n//   const [currentPage, setCurrentPage] = useState(1);\n//   const [personPerPage, setPersonPerPage] = useState(8);\n//   const indexOfLastVehicle = currentPage * personPerPage;\n//   const indexOfFirstVehicle = indexOfLastVehicle - personPerPage;\n//   const currentPerson = peopleResults ? peopleResults.slice(indexOfFirstVehicle, indexOfLastVehicle) : people.slice(indexOfFirstVehicle, indexOfLastVehicle);\n\n//   const handleOpenModal = (person) => {\n//     setselectedPerson({ ...person, isPerson: true });\n//     openModal();\n//   };\n\n//   const pagination = (pageNumber) => {\n//     setCurrentPage(pageNumber);\n//   };\n\n//   return (\n//     <div>\n\n//     <div className=\"main-container\">\n//       <SearchBar prop=\"people\"></SearchBar>\n//       {currentPerson.map((person) => {\n//         console.log(currentPerson)\n//         return (\n//           <Card key={person._id} name={person.name}>\n//             <button onClick={() => handleOpenModal(person)}>OpenDetail</button>\n//           </Card>\n//         );\n//       })}\n//       {isOpenModal && selectedPerson && (\n//         <Modals isOpen={isOpenModal} closeModal={closeModal}>\n//           {selectedPerson}\n//         </Modals>\n//       )}\n//     </div>\n \n//       <Pagination\n//           propPerPage={personPerPage}\n//           length={people.length}\n//           pagination={pagination}\n//           currentPage={currentPage}\n//         />\n//     </div>\n//   );\n// };\n\n// export default People;\nimport React, { useState, useEffect } from \"react\";\nimport Card from \"../../GenericComponents/Card/Card\";\nimport { useSelector } from \"react-redux\";\nimport Modals from \"../../GenericComponents/Modal/Modals\";\nimport { useModal } from \"../../hooks/useModal\";\nimport Pagination from \"../../GenericComponents/Pagination/Pagination\";\nimport SearchBar from \"../../GenericComponents/SearchBar/SerchBar\";\n\nconst People = () => {\n  const searchResults = useSelector((state) => state.searchResults.people);\n  const people = useSelector((state) => state.people);\n  const peopleResults = searchResults && searchResults.length ? searchResults : null;\n\n  const [selectedPerson, setselectedPerson] = useState(null);\n  const [isOpenModal, openModal, closeModal] = useModal(false);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [personPerPage, setPersonPerPage] = useState(8);\n  const [hasSearchResults, setHasSearchResults] = useState(false);\n  const [currentPerson, setCurrentPerson] = useState([]);\n\n  useEffect(() => {\n    // Update the current people based on the current page and people per page\n    const indexOfLastPerson = currentPage * personPerPage;\n    const indexOfFirstPerson = indexOfLastPerson - personPerPage;\n    if (hasSearchResults && searchResults) {\n      setCurrentPerson(searchResults.slice(indexOfFirstPerson, indexOfLastPerson));\n    } else {\n      setCurrentPerson(people.slice(indexOfFirstPerson, indexOfLastPerson));\n    }\n  }, [hasSearchResults, currentPage, personPerPage, people, searchResults]);\n\n  useEffect(() => {\n    // Check if there are search results\n    setHasSearchResults(searchResults && searchResults.length > 0);\n    // Reset currentPage when search results change\n    setCurrentPage(1);\n  }, [searchResults]);\n\n  const handleOpenModal = (person) => {\n    setselectedPerson({ ...person, isPerson: true });\n    openModal();\n  };\n\n  const pagination = (pageNumber) => {\n    setCurrentPage(pageNumber);\n  };\n\n  return (\n    <>\n    <div>\n        <SearchBar prop=\"people\" />\n      <div className=\"main-container\">\n        {currentPerson.map((person) => {\n          return (\n            <Card key={person._id} name={person.name}>\n              <button onClick={() => handleOpenModal(person)}>OpenDetail</button>\n            </Card>\n          );\n        })}\n        {isOpenModal && selectedPerson && (\n          <Modals isOpen={isOpenModal} closeModal={closeModal}>\n            {selectedPerson.name} {/* Here you can access other properties of the person */}\n          </Modals>\n        )}\n      </div>\n    </div>\n      <Pagination\n        propPerPage={personPerPage}\n        length={hasSearchResults ? searchResults.length : people.length}\n        pagination={pagination}\n        currentPage={currentPage}\n      />\n    </>\n  );\n        };\n\nexport default People;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}