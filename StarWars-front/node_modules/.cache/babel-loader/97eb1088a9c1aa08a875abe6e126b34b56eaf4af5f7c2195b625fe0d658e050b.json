{"ast":null,"code":"var _jsxFileName = \"/Users/mavictoriachouhy/Desktop/Training/Conexa/StarWars-front/src/Components/People/People.jsx\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState } from \"react\";\n// import Card from \"../../GenericComponents/Card/Card\";\n// import { useDispatch, useSelector } from 'react-redux';\n// import \"./People.scss\";\n// import Modals from \"../../GenericComponents/Modal/Modals\";\n// import { useModal } from \"../../hooks/useModal\";\n// import { getAllPeople } from \"../../redux/actions\";\n\n// const People = () => {\n//   const people = useSelector((state) => state.people);\n//   const total = useSelector((state) => state.total);\n//   const loading = useSelector((state) => state.loading);\n//   const [selectedPerson, setSelectedPerson] = useState(null);\n//   const [isOpenModal, openModal, closeModal] = useModal(false);\n//   const [currentPage, setCurrentPage] = useState(0);\n\n//   console.log('People:', people);\n//   console.log('Total:', total);\n//   console.log('Loading:', loading);\n\n//   const dispatch = useDispatch();\n\n//   useEffect(() => {\n//     // Llamar al action con el valor de página actual\n//     dispatch(getAllPeople(currentPage));\n//   }, [dispatch, currentPage]);\n\n//   const totalPages = total;\n\n//   // Mostrar \"Loading...\" mientras los datos se están obteniendo del backend\n//   if (loading) {\n//     return <div>Loading...</div>;\n//   }\n\n//   if (!people || people.length === 0) {\n//     return <div>No data available.</div>;\n//   }\n\n//   const handlePreviousPage = () => {\n//     setCurrentPage((prevPage) => Math.max(prevPage - 1, 0));\n//   };\n\n//   const handleNextPage = () => {\n//     setCurrentPage((prevPage) => Math.min(prevPage + 1, totalPages - 1));\n//   };\n\n//   const handleOpenModal = (person) => {\n//     setSelectedPerson({ ...person, isPerson: true });\n//     openModal();\n//   };\n\n//   return (\n//     <div >\n//     <div className=\"main-container\">\n//       {people.map((person) => {\n//         return (\n//           <Card\n//             key={person._id}\n//             name={person.name}\n//           >\n//             <button onClick={() => handleOpenModal(person)}>OpenDetail</button>\n//           </Card>\n//         );\n//       })}\n//       {isOpenModal && selectedPerson && (\n//         <Modals isOpen={isOpenModal} closeModal={closeModal} >\n//           {selectedPerson}\n//         </Modals>\n//       )}\n\n//       {/* Renderizar los botones de paginación */}\n//       <div className=\"pagination\">\n//         <button onClick={handlePreviousPage} disabled={currentPage === 0}>Previous</button>\n//         <span>{currentPage + 1} / {totalPages}</span>\n//         <button onClick={handleNextPage} disabled={currentPage === totalPages - 1}>Next</button>\n//       </div>\n//     </div>\n//     </div>\n//   );\n// }\n\n// export default People;\nimport Card from \"../../GenericComponents/Card/Card\";\nimport { useSelector } from \"react-redux\";\nimport \"./People.scss\";\nimport Modals from \"../../GenericComponents/Modal/Modals\";\nimport { useModal } from \"../../hooks/useModal\";\nimport { useState } from \"react\";\nimport Pagination from \"../../GenericComponents/Pagination/Pagination\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst People = () => {\n  _s();\n  const people = useSelector(state => state.people);\n  const [selectedPerson, setSelectedPerson] = useState(null);\n  const [isOpenModal, openModal, closeModal] = useModal(false);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [peoplePerPage, setPeoplePerPage] = useState(8);\n  const indexOfLastPerson = currentPage * peoplePerPage;\n  const indexOfFirstPerson = indexOfLastPerson - peoplePerPage;\n  const currentPerson = people.slice(indexOfFirstPerson, indexOfLastPerson);\n  const handleOpenModal = person => {\n    setSelectedPerson({\n      ...person,\n      isPerson: true\n    });\n    openModal();\n  };\n  const pagination = pageNumber => {\n    setCurrentPage(pageNumber);\n    setPeoplePerPage(peoplePerPage);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main-container\",\n    children: [currentPerson.map(person => {\n      return /*#__PURE__*/_jsxDEV(Card, {\n        name: person.name,\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleOpenModal(person),\n          children: \"OpenDetail\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 13\n        }, this)\n      }, person._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 11\n      }, this);\n    }), isOpenModal && selectedPerson && /*#__PURE__*/_jsxDEV(Modals, {\n      isOpen: isOpenModal,\n      closeModal: closeModal,\n      children: selectedPerson\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Pagination, {\n        propPerPage: peoplePerPage // props that needs the component to render properly\n        ,\n        length: people.length,\n        pagination: pagination\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 5\n  }, this);\n};\n_s(People, \"Najo6JQEY2N45NFOYzRxgH0iv/Q=\", false, function () {\n  return [useSelector, useModal];\n});\n_c = People;\nexport default People;\nvar _c;\n$RefreshReg$(_c, \"People\");","map":{"version":3,"names":["Card","useSelector","Modals","useModal","useState","Pagination","jsxDEV","_jsxDEV","People","_s","people","state","selectedPerson","setSelectedPerson","isOpenModal","openModal","closeModal","currentPage","setCurrentPage","peoplePerPage","setPeoplePerPage","indexOfLastPerson","indexOfFirstPerson","currentPerson","slice","handleOpenModal","person","isPerson","pagination","pageNumber","className","children","map","name","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_id","isOpen","propPerPage","length","_c","$RefreshReg$"],"sources":["/Users/mavictoriachouhy/Desktop/Training/Conexa/StarWars-front/src/Components/People/People.jsx"],"sourcesContent":["// import React, { useEffect, useState } from \"react\";\n// import Card from \"../../GenericComponents/Card/Card\";\n// import { useDispatch, useSelector } from 'react-redux';\n// import \"./People.scss\";\n// import Modals from \"../../GenericComponents/Modal/Modals\";\n// import { useModal } from \"../../hooks/useModal\";\n// import { getAllPeople } from \"../../redux/actions\";\n\n// const People = () => {\n//   const people = useSelector((state) => state.people);\n//   const total = useSelector((state) => state.total);\n//   const loading = useSelector((state) => state.loading);\n//   const [selectedPerson, setSelectedPerson] = useState(null);\n//   const [isOpenModal, openModal, closeModal] = useModal(false);\n//   const [currentPage, setCurrentPage] = useState(0);\n\n//   console.log('People:', people);\n//   console.log('Total:', total);\n//   console.log('Loading:', loading);\n\n//   const dispatch = useDispatch();\n\n//   useEffect(() => {\n//     // Llamar al action con el valor de página actual\n//     dispatch(getAllPeople(currentPage));\n//   }, [dispatch, currentPage]);\n\n//   const totalPages = total;\n\n//   // Mostrar \"Loading...\" mientras los datos se están obteniendo del backend\n//   if (loading) {\n//     return <div>Loading...</div>;\n//   }\n\n//   if (!people || people.length === 0) {\n//     return <div>No data available.</div>;\n//   }\n\n//   const handlePreviousPage = () => {\n//     setCurrentPage((prevPage) => Math.max(prevPage - 1, 0));\n//   };\n\n//   const handleNextPage = () => {\n//     setCurrentPage((prevPage) => Math.min(prevPage + 1, totalPages - 1));\n//   };\n\n\n//   const handleOpenModal = (person) => {\n//     setSelectedPerson({ ...person, isPerson: true });\n//     openModal();\n//   };\n\n\n\n//   return (\n//     <div >\n//     <div className=\"main-container\">\n//       {people.map((person) => {\n//         return (\n//           <Card\n//             key={person._id}\n//             name={person.name}\n//           >\n//             <button onClick={() => handleOpenModal(person)}>OpenDetail</button>\n//           </Card>\n//         );\n//       })}\n//       {isOpenModal && selectedPerson && (\n//         <Modals isOpen={isOpenModal} closeModal={closeModal} >\n//           {selectedPerson}\n//         </Modals>\n//       )}\n\n//       {/* Renderizar los botones de paginación */}\n//       <div className=\"pagination\">\n//         <button onClick={handlePreviousPage} disabled={currentPage === 0}>Previous</button>\n//         <span>{currentPage + 1} / {totalPages}</span>\n//         <button onClick={handleNextPage} disabled={currentPage === totalPages - 1}>Next</button>\n//       </div>\n//     </div>\n//     </div>\n//   );\n// }\n\n// export default People;\nimport Card from \"../../GenericComponents/Card/Card\";\nimport { useSelector } from \"react-redux\";\nimport \"./People.scss\";\nimport Modals from \"../../GenericComponents/Modal/Modals\";\nimport { useModal } from \"../../hooks/useModal\";\nimport { useState } from \"react\";\nimport Pagination from \"../../GenericComponents/Pagination/Pagination\";\n\nconst People = () => {\n  const people = useSelector((state) => state.people);\n  const [selectedPerson, setSelectedPerson] = useState(null);\n  const [isOpenModal, openModal, closeModal] = useModal(false);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [peoplePerPage, setPeoplePerPage] = useState(8);\n  const indexOfLastPerson = currentPage * peoplePerPage; \n  const indexOfFirstPerson = indexOfLastPerson - peoplePerPage; \n  const currentPerson = people.slice(indexOfFirstPerson, indexOfLastPerson);\n\n  const handleOpenModal = (person) => {\n    setSelectedPerson({ ...person, isPerson: true });\n    openModal();\n  };\n\n  const pagination = (pageNumber) => {\n    setCurrentPage(pageNumber);\n    setPeoplePerPage(peoplePerPage);\n  };\n\n\n  return (\n    <div className=\"main-container\">\n      {currentPerson.map((person) => {\n        return (\n          <Card key={person._id} name={person.name}>\n            <button onClick={() => handleOpenModal(person)}>OpenDetail</button>\n          </Card>\n        );\n      })}\n      {isOpenModal && selectedPerson && (\n        <Modals isOpen={isOpenModal} closeModal={closeModal}>\n          {selectedPerson}\n        </Modals>\n      )}\n      <div>\n      <Pagination propPerPage = {peoplePerPage} // props that needs the component to render properly\n                            length = {people.length}\n                            pagination = {pagination}\n                />\n      </div>\n    </div>\n  );\n};\n\nexport default People;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}