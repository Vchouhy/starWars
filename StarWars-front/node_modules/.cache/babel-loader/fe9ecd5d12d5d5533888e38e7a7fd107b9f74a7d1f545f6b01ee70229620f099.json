{"ast":null,"code":"var _jsxFileName = \"/Users/mavictoriachouhy/Desktop/Training/Conexa/StarWars-front/src/Components/Films/Films.jsx\",\n  _s = $RefreshSig$();\n// import { useSelector } from 'react-redux';\n// import Card from \"../../GenericComponents/Card/Card\";\n// // import './People.scss'\n// import Modals from \"../../GenericComponents/Modal/Modals\";\n// import { useModal } from \"../../hooks/useModal\";\n// import { useState, useEffect } from \"react\";\n// import SearchBar from \"../../GenericComponents/SearchBar/SerchBar\";\n// import Pagination from \"../../GenericComponents/Pagination/Pagination\";\n\n// const Films = ()=>{\n//     const films = useSelector((state) => state.films);\n\n//     const searchResults = useSelector((state) => state.searchResults.people);\n//     const filmResults = searchResults && searchResults.length ? searchResults : films;\n\n//     const [selectedFilm, setSelectedFilm] = useState(null);\n//     const [isOpenModal, openModal, closeModal] = useModal(false);\n//     const [currentPage, setCurrentPage] = useState(1);\n//     const [filmPerPage, setFilmPerPage] = useState(8);\n//     const indexOfLastFilm = currentPage * filmPerPage;\n//     const indexOfFirstFilm = indexOfLastFilm - filmPerPage;\n//     const currentFilm = filmResults ? filmResults.slice(indexOfFirstFilm, indexOfLastFilm) : films.slice(indexOfFirstFilm, indexOfLastFilm);\n//     // const [currentFilm, setCurrentFilm] = useState([]);\n\n//     useEffect(() => {\n//       setCurrentPage(1); // Reset currentPage when search results change\n//     }, [filmResults]);\n\n//     const pagination = (pageNumber) => {\n//       setCurrentPage(pageNumber);\n//     };\n\n//     const handleOpenModal = (film) => {\n//       setSelectedFilm({...film, isFilm: true});\n//       openModal();\n//     };\n\n//     return (\n//       <>\n//       <div className=\"main-container\">\n//          <SearchBar prop=\"films\"></SearchBar>\n//         {currentFilm.map((film) => {\n//           return (\n//             <Card\n//               key={film._id}\n//               name={film.title}\n\n//             >\n//               <button onClick={() => handleOpenModal(film)}>OpenDetail</button>\n//             </Card>\n//           );\n//         })}\n//         {isOpenModal && selectedFilm && (\n//           <Modals isOpen={isOpenModal} closeModal={closeModal} >\n//             {selectedFilm}\n\n//           </Modals>\n//         )}\n//       </div>\n//          <Pagination\n//         propPerPage={filmPerPage}\n//         length={films.length}\n//         pagination={pagination}\n//         currentPage={currentPage}\n//       />\n//       </>\n//     );\n//   };\n\n// export default Films;\nimport { useSelector } from 'react-redux';\nimport Card from \"../../GenericComponents/Card/Card\";\nimport Modals from \"../../GenericComponents/Modal/Modals\";\nimport { useModal } from \"../../hooks/useModal\";\nimport { useState, useEffect } from \"react\";\nimport SearchBar from \"../../GenericComponents/SearchBar/SerchBar\";\nimport Pagination from \"../../GenericComponents/Pagination/Pagination\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Films = () => {\n  _s();\n  const films = useSelector(state => state.films);\n  const searchResults = useSelector(state => state.searchResults.films);\n  const filmResults = searchResults && searchResults.length ? searchResults : null;\n  const [selectedFilm, setSelectedFilm] = useState(null);\n  const [isOpenModal, openModal, closeModal] = useModal(false);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [filmPerPage, setFilmPerPage] = useState(8);\n  const [hasSearchResults, setHasSearchResults] = useState(false);\n  const [currentFilm, setCurrentFilm] = useState([]);\n  useEffect(() => {\n    // Update the current films based on the current page and films per page\n    const indexOfLastFilm = currentPage * filmPerPage;\n    const indexOfFirstFilm = indexOfLastFilm - filmPerPage;\n    if (hasSearchResults && searchResults) {\n      setCurrentFilm(searchResults.slice(indexOfFirstFilm, indexOfLastFilm));\n    } else {\n      setCurrentFilm(films.slice(indexOfFirstFilm, indexOfLastFilm));\n    }\n  }, [hasSearchResults, currentPage, filmPerPage, films, searchResults]);\n  useEffect(() => {\n    // Check if there are search results\n    setHasSearchResults(searchResults && searchResults.length > 0);\n    // Reset currentPage when search results change\n    setCurrentPage(1);\n  }, [searchResults]);\n\n  // const updateCurrentFilm = (filmArray) => {\n  //   setCurrentFilm(filmArray);\n  // };\n\n  const pagination = pageNumber => {\n    setCurrentPage(pageNumber);\n  };\n  const handleOpenModal = film => {\n    setSelectedFilm({\n      ...film,\n      isFilm: true\n    });\n    openModal();\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-container\",\n      children: [/*#__PURE__*/_jsxDEV(SearchBar, {\n        prop: \"films\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this), currentFilm.map(film => {\n        return /*#__PURE__*/_jsxDEV(Card, {\n          name: film.title,\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleOpenModal(film),\n            children: \"OpenDetail\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 15\n          }, this)\n        }, film._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 13\n        }, this);\n      }), isOpenModal && selectedFilm && /*#__PURE__*/_jsxDEV(Modals, {\n        isOpen: isOpenModal,\n        closeModal: closeModal,\n        children: [selectedFilm.title, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Pagination, {\n      propPerPage: filmPerPage,\n      length: hasSearchResults ? searchResults.length : films.length,\n      pagination: pagination,\n      currentPage: currentPage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(Films, \"IcYFdDdzqRe3JoNs7eKF5uoIqdI=\", false, function () {\n  return [useSelector, useSelector, useModal];\n});\n_c = Films;\nexport default Films;\nvar _c;\n$RefreshReg$(_c, \"Films\");","map":{"version":3,"names":["useSelector","Card","Modals","useModal","useState","useEffect","SearchBar","Pagination","jsxDEV","_jsxDEV","Fragment","_Fragment","Films","_s","films","state","searchResults","filmResults","length","selectedFilm","setSelectedFilm","isOpenModal","openModal","closeModal","currentPage","setCurrentPage","filmPerPage","setFilmPerPage","hasSearchResults","setHasSearchResults","currentFilm","setCurrentFilm","indexOfLastFilm","indexOfFirstFilm","slice","pagination","pageNumber","handleOpenModal","film","isFilm","children","className","prop","fileName","_jsxFileName","lineNumber","columnNumber","map","name","title","onClick","_id","isOpen","propPerPage","_c","$RefreshReg$"],"sources":["/Users/mavictoriachouhy/Desktop/Training/Conexa/StarWars-front/src/Components/Films/Films.jsx"],"sourcesContent":["// import { useSelector } from 'react-redux';\n// import Card from \"../../GenericComponents/Card/Card\";\n// // import './People.scss'\n// import Modals from \"../../GenericComponents/Modal/Modals\";\n// import { useModal } from \"../../hooks/useModal\";\n// import { useState, useEffect } from \"react\";\n// import SearchBar from \"../../GenericComponents/SearchBar/SerchBar\";\n// import Pagination from \"../../GenericComponents/Pagination/Pagination\";\n\n// const Films = ()=>{\n//     const films = useSelector((state) => state.films);\n\n//     const searchResults = useSelector((state) => state.searchResults.people);\n//     const filmResults = searchResults && searchResults.length ? searchResults : films;\n  \n//     const [selectedFilm, setSelectedFilm] = useState(null);\n//     const [isOpenModal, openModal, closeModal] = useModal(false);\n//     const [currentPage, setCurrentPage] = useState(1);\n//     const [filmPerPage, setFilmPerPage] = useState(8);\n//     const indexOfLastFilm = currentPage * filmPerPage;\n//     const indexOfFirstFilm = indexOfLastFilm - filmPerPage;\n//     const currentFilm = filmResults ? filmResults.slice(indexOfFirstFilm, indexOfLastFilm) : films.slice(indexOfFirstFilm, indexOfLastFilm);\n//     // const [currentFilm, setCurrentFilm] = useState([]);\n\n//     useEffect(() => {\n//       setCurrentPage(1); // Reset currentPage when search results change\n//     }, [filmResults]);\n\n//     const pagination = (pageNumber) => {\n//       setCurrentPage(pageNumber);\n//     };\n\n//     const handleOpenModal = (film) => {\n//       setSelectedFilm({...film, isFilm: true});\n//       openModal();\n//     };\n\n//     return (\n//       <>\n//       <div className=\"main-container\">\n//          <SearchBar prop=\"films\"></SearchBar>\n//         {currentFilm.map((film) => {\n//           return (\n//             <Card\n//               key={film._id}\n//               name={film.title}\n             \n//             >\n//               <button onClick={() => handleOpenModal(film)}>OpenDetail</button>\n//             </Card>\n//           );\n//         })}\n//         {isOpenModal && selectedFilm && (\n//           <Modals isOpen={isOpenModal} closeModal={closeModal} >\n//             {selectedFilm}\n            \n//           </Modals>\n//         )}\n//       </div>\n//          <Pagination\n//         propPerPage={filmPerPage}\n//         length={films.length}\n//         pagination={pagination}\n//         currentPage={currentPage}\n//       />\n//       </>\n//     );\n//   };\n\n\n// export default Films;\nimport { useSelector } from 'react-redux';\nimport Card from \"../../GenericComponents/Card/Card\";\nimport Modals from \"../../GenericComponents/Modal/Modals\";\nimport { useModal } from \"../../hooks/useModal\";\nimport { useState, useEffect } from \"react\";\nimport SearchBar from \"../../GenericComponents/SearchBar/SerchBar\";\nimport Pagination from \"../../GenericComponents/Pagination/Pagination\";\n\nconst Films = () => {\n  const films = useSelector((state) => state.films);\n  const searchResults = useSelector((state) => state.searchResults.films);\n  const filmResults = searchResults && searchResults.length ? searchResults : null;\n\n  const [selectedFilm, setSelectedFilm] = useState(null);\n  const [isOpenModal, openModal, closeModal] = useModal(false);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [filmPerPage, setFilmPerPage] = useState(8);\n  const [hasSearchResults, setHasSearchResults] = useState(false);\n  const [currentFilm, setCurrentFilm] = useState([]);\n\n  useEffect(() => {\n    // Update the current films based on the current page and films per page\n    const indexOfLastFilm = currentPage * filmPerPage;\n    const indexOfFirstFilm = indexOfLastFilm - filmPerPage;\n    if (hasSearchResults && searchResults) {\n      setCurrentFilm(searchResults.slice(indexOfFirstFilm, indexOfLastFilm));\n    } else {\n      setCurrentFilm(films.slice(indexOfFirstFilm, indexOfLastFilm));\n    }\n  }, [hasSearchResults, currentPage, filmPerPage, films, searchResults]);\n\n  useEffect(() => {\n    // Check if there are search results\n    setHasSearchResults(searchResults && searchResults.length > 0);\n    // Reset currentPage when search results change\n    setCurrentPage(1);\n  }, [searchResults]);\n\n  // const updateCurrentFilm = (filmArray) => {\n  //   setCurrentFilm(filmArray);\n  // };\n\n  const pagination = (pageNumber) => {\n    setCurrentPage(pageNumber);\n  };\n\n  const handleOpenModal = (film) => {\n    setSelectedFilm({ ...film, isFilm: true });\n    openModal();\n  };\n\n  return (\n    <>\n      <div className=\"main-container\">\n        <SearchBar prop=\"films\" />\n        {currentFilm.map((film) => {\n          return (\n            <Card key={film._id} name={film.title}>\n              <button onClick={() => handleOpenModal(film)}>OpenDetail</button>\n            </Card>\n          );\n        })}\n        {isOpenModal && selectedFilm && (\n          <Modals isOpen={isOpenModal} closeModal={closeModal}>\n            {selectedFilm.title} {/* Here you can access other properties of the film */}\n          </Modals>\n        )}\n      </div>\n      <Pagination\n        propPerPage={filmPerPage}\n        length={hasSearchResults ? searchResults.length : films.length}\n        pagination={pagination}\n        currentPage={currentPage}\n      />\n    </>\n  );\n};\n\nexport default Films;\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}