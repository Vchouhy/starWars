{"ast":null,"code":"var _jsxFileName = \"/Users/mavictoriachouhy/Desktop/Training/Conexa/StarWars-front/src/Components/People/People.jsx\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState } from \"react\";\n// import Card from \"../../GenericComponents/Card/Card\";\n// import { useDispatch, useSelector } from 'react-redux';\n// import \"./People.scss\";\n// import Modals from \"../../GenericComponents/Modal/Modals\";\n// import { useModal } from \"../../hooks/useModal\";\n// import { getAllPeople } from \"../../redux/actions\";\n\n// const People = () => {\n//   const people = useSelector((state) => state.people);\n//   const total = useSelector((state) => state.total);\n//   const loading = useSelector((state) => state.loading);\n//   const [selectedPerson, setSelectedPerson] = useState(null);\n//   const [isOpenModal, openModal, closeModal] = useModal(false);\n//   const [currentPage, setCurrentPage] = useState(0);\n\n//   console.log('People:', people);\n//   console.log('Total:', total);\n//   console.log('Loading:', loading);\n\n//   const dispatch = useDispatch();\n\n//   useEffect(() => {\n//     // Llamar al action con el valor de página actual\n//     dispatch(getAllPeople(currentPage));\n//   }, [dispatch, currentPage]);\n\n//   const totalPages = total;\n\n//   // Mostrar \"Loading...\" mientras los datos se están obteniendo del backend\n//   if (loading) {\n//     return <div>Loading...</div>;\n//   }\n\n//   if (!people || people.length === 0) {\n//     return <div>No data available.</div>;\n//   }\n\n//   const handlePreviousPage = () => {\n//     setCurrentPage((prevPage) => Math.max(prevPage - 1, 0));\n//   };\n\n//   const handleNextPage = () => {\n//     setCurrentPage((prevPage) => Math.min(prevPage + 1, totalPages - 1));\n//   };\n\n//   const handleOpenModal = (person) => {\n//     setSelectedPerson({ ...person, isPerson: true });\n//     openModal();\n//   };\n\n//   return (\n//     <div >\n//     <div className=\"main-container\">\n//       {people.map((person) => {\n//         return (\n//           <Card\n//             key={person._id}\n//             name={person.name}\n//           >\n//             <button onClick={() => handleOpenModal(person)}>OpenDetail</button>\n//           </Card>\n//         );\n//       })}\n//       {isOpenModal && selectedPerson && (\n//         <Modals isOpen={isOpenModal} closeModal={closeModal} >\n//           {selectedPerson}\n//         </Modals>\n//       )}\n\n//       {/* Renderizar los botones de paginación */}\n//       <div className=\"pagination\">\n//         <button onClick={handlePreviousPage} disabled={currentPage === 0}>Previous</button>\n//         <span>{currentPage + 1} / {totalPages}</span>\n//         <button onClick={handleNextPage} disabled={currentPage === totalPages - 1}>Next</button>\n//       </div>\n//     </div>\n//     </div>\n//   );\n// }\n\n// export default People;\nimport Card from \"../../GenericComponents/Card/Card\";\nimport { useSelector } from \"react-redux\";\nimport \"./People.scss\";\nimport Modals from \"../../GenericComponents/Modal/Modals\";\nimport { useModal } from \"../../hooks/useModal\";\nimport { useState } from \"react\";\nimport Pagination from \"../../GenericComponents/Pagination/Pagination\";\nimport usePagination from \"../../GenericComponents/Pagination/Pagination\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst People = () => {\n  _s();\n  const people = useSelector(state => state.people);\n  const [selectedPerson, setSelectedPerson] = useState(null);\n  const [isOpenModal, openModal, closeModal] = useModal(false);\n  // const [currentPage, setCurrentPage] = useState(1);\n  // const [peoplePerPage, setPeoplePerPage] = useState(8);\n  // const indexOfLastPerson = currentPage * peoplePerPage; \n  // const indexOfFirstPerson = indexOfLastPerson - peoplePerPage; \n  // const currentPerson = people.slice(indexOfFirstPerson, indexOfLastPerson);\n\n  const handleOpenModal = person => {\n    setSelectedPerson({\n      ...person,\n      isPerson: true\n    });\n    openModal();\n  };\n\n  // const pagination = (pageNumber) => {\n  //   setCurrentPage(pageNumber);\n  //   setPeoplePerPage(peoplePerPage);\n  // };\n\n  let [page, setPage] = useState(1);\n  const perPage = 10;\n  const count = Math.ceil(people.length / perPage);\n  // console.log(count)\n  const peopleData = usePagination(people, perPage);\n  // console.log(peopleData)\n\n  const handleChange = (e, p) => {\n    setPage(p);\n    peopleData.jump(p);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main-container\",\n    children: [peopleData.map(person => {\n      return /*#__PURE__*/_jsxDEV(Card, {\n        name: person.name,\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleOpenModal(person),\n          children: \"OpenDetail\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 13\n        }, this)\n      }, person._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 11\n      }, this);\n    }), isOpenModal && selectedPerson && /*#__PURE__*/_jsxDEV(Modals, {\n      isOpen: isOpenModal,\n      closeModal: closeModal,\n      children: selectedPerson\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Pagination, {\n        count: count,\n        size: \"large\",\n        page: page,\n        variant: \"outlined\",\n        shape: \"rounded\",\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 131,\n    columnNumber: 5\n  }, this);\n};\n_s(People, \"umIg9VhmFrfBseQVRNPw+mcPefs=\", false, function () {\n  return [useSelector, useModal, usePagination];\n});\n_c = People;\nexport default People;\nvar _c;\n$RefreshReg$(_c, \"People\");","map":{"version":3,"names":["Card","useSelector","Modals","useModal","useState","Pagination","usePagination","jsxDEV","_jsxDEV","People","_s","people","state","selectedPerson","setSelectedPerson","isOpenModal","openModal","closeModal","handleOpenModal","person","isPerson","page","setPage","perPage","count","Math","ceil","length","peopleData","handleChange","e","p","jump","className","children","map","name","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_id","isOpen","size","variant","shape","onChange","_c","$RefreshReg$"],"sources":["/Users/mavictoriachouhy/Desktop/Training/Conexa/StarWars-front/src/Components/People/People.jsx"],"sourcesContent":["// import React, { useEffect, useState } from \"react\";\n// import Card from \"../../GenericComponents/Card/Card\";\n// import { useDispatch, useSelector } from 'react-redux';\n// import \"./People.scss\";\n// import Modals from \"../../GenericComponents/Modal/Modals\";\n// import { useModal } from \"../../hooks/useModal\";\n// import { getAllPeople } from \"../../redux/actions\";\n\n// const People = () => {\n//   const people = useSelector((state) => state.people);\n//   const total = useSelector((state) => state.total);\n//   const loading = useSelector((state) => state.loading);\n//   const [selectedPerson, setSelectedPerson] = useState(null);\n//   const [isOpenModal, openModal, closeModal] = useModal(false);\n//   const [currentPage, setCurrentPage] = useState(0);\n\n//   console.log('People:', people);\n//   console.log('Total:', total);\n//   console.log('Loading:', loading);\n\n//   const dispatch = useDispatch();\n\n//   useEffect(() => {\n//     // Llamar al action con el valor de página actual\n//     dispatch(getAllPeople(currentPage));\n//   }, [dispatch, currentPage]);\n\n//   const totalPages = total;\n\n//   // Mostrar \"Loading...\" mientras los datos se están obteniendo del backend\n//   if (loading) {\n//     return <div>Loading...</div>;\n//   }\n\n//   if (!people || people.length === 0) {\n//     return <div>No data available.</div>;\n//   }\n\n//   const handlePreviousPage = () => {\n//     setCurrentPage((prevPage) => Math.max(prevPage - 1, 0));\n//   };\n\n//   const handleNextPage = () => {\n//     setCurrentPage((prevPage) => Math.min(prevPage + 1, totalPages - 1));\n//   };\n\n\n//   const handleOpenModal = (person) => {\n//     setSelectedPerson({ ...person, isPerson: true });\n//     openModal();\n//   };\n\n\n\n//   return (\n//     <div >\n//     <div className=\"main-container\">\n//       {people.map((person) => {\n//         return (\n//           <Card\n//             key={person._id}\n//             name={person.name}\n//           >\n//             <button onClick={() => handleOpenModal(person)}>OpenDetail</button>\n//           </Card>\n//         );\n//       })}\n//       {isOpenModal && selectedPerson && (\n//         <Modals isOpen={isOpenModal} closeModal={closeModal} >\n//           {selectedPerson}\n//         </Modals>\n//       )}\n\n//       {/* Renderizar los botones de paginación */}\n//       <div className=\"pagination\">\n//         <button onClick={handlePreviousPage} disabled={currentPage === 0}>Previous</button>\n//         <span>{currentPage + 1} / {totalPages}</span>\n//         <button onClick={handleNextPage} disabled={currentPage === totalPages - 1}>Next</button>\n//       </div>\n//     </div>\n//     </div>\n//   );\n// }\n\n// export default People;\nimport Card from \"../../GenericComponents/Card/Card\";\nimport { useSelector } from \"react-redux\";\nimport \"./People.scss\";\nimport Modals from \"../../GenericComponents/Modal/Modals\";\nimport { useModal } from \"../../hooks/useModal\";\nimport { useState } from \"react\";\nimport Pagination from \"../../GenericComponents/Pagination/Pagination\";\nimport usePagination from \"../../GenericComponents/Pagination/Pagination\";\n\nconst People = () => {\n  const people = useSelector((state) => state.people);\n  const [selectedPerson, setSelectedPerson] = useState(null);\n  const [isOpenModal, openModal, closeModal] = useModal(false);\n  // const [currentPage, setCurrentPage] = useState(1);\n  // const [peoplePerPage, setPeoplePerPage] = useState(8);\n  // const indexOfLastPerson = currentPage * peoplePerPage; \n  // const indexOfFirstPerson = indexOfLastPerson - peoplePerPage; \n  // const currentPerson = people.slice(indexOfFirstPerson, indexOfLastPerson);\n\n  const handleOpenModal = (person) => {\n    setSelectedPerson({ ...person, isPerson: true });\n    openModal();\n  };\n\n  // const pagination = (pageNumber) => {\n  //   setCurrentPage(pageNumber);\n  //   setPeoplePerPage(peoplePerPage);\n  // };\n\n\n  let [page, setPage] = useState(1);\n  const perPage = 10;\n\n  const count = Math.ceil(people.length / perPage);\n  // console.log(count)\n  const peopleData = usePagination(people, perPage);\n  // console.log(peopleData)\n\n  const handleChange = (e, p) => {\n    setPage(p);\n    peopleData.jump(p);\n  };\n\n\n  return (\n    <div className=\"main-container\">\n      {peopleData.map((person) => {\n        return (\n          <Card key={person._id} name={person.name}>\n            <button onClick={() => handleOpenModal(person)}>OpenDetail</button>\n          </Card>\n        );\n      })}\n      {isOpenModal && selectedPerson && (\n        <Modals isOpen={isOpenModal} closeModal={closeModal}>\n          {selectedPerson}\n        </Modals>\n      )}\n      <div>\n      <Pagination\n        count={count}\n        size=\"large\"\n        page={page}\n        variant=\"outlined\"\n        shape=\"rounded\"\n        onChange={handleChange}\n      >\n        \n      </Pagination>\n      </div>\n    </div>\n  );\n};\n\nexport default People;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}